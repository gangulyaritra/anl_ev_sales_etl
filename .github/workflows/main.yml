name: ANL EV Sales Workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - README.md

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  continuous-integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install System Dependencies
        run: sudo apt-get update && sudo apt-get install -y xvfb chromium-browser

      - name: Start Xvfb
        run: |
          Xvfb :99 -screen 0 1920x1080x24 &
          export DISPLAY=:99
          export PYTHONUNBUFFERED=1

      - name: Install Python Dependencies
        run: |
          pip install --upgrade pip
          pip install selenium invoke .

      - name: Run Pylint
        run: inv lint

      - name: Run Sample ETL for ANL EV-Sales Scraper
        run: xvfb-run --auto-servernum --server-num=1 run_anl_ev_sales_etl --environment prod
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: continuous-integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Install Utilities
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Images to ECR
        id: build-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Pull the previous image to leverage caching (ignore the error if it is unavailable).
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG || true
          # Build a Docker image with cache-from to speed up the build.
          docker build --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Push the new image to ECR.
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  export-logs-to-s3:
    name: Archive Workflow Logs to S3
    needs:
      - continuous-integration
      - build-and-push-ecr-image
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Install AWS CLI
        uses: aws-actions/setup-aws-cli@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download Workflow Logs (ZIP)
        env:
          GH_TOKEN: ${{ github.token }}
          RUN_ID: ${{ github.run_id }}
          REPO: ${{ github.repository }}
        run: |
          curl -sSL -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/$REPO/actions/runs/$RUN_ID/logs" -o logs.zip
          if [ ! -s logs.zip ]; then
            echo "No logs.zip content downloaded."
            exit 1
          fi

      - name: Upload Logs to S3
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          WORKFLOW: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          RUN_NUMBER: ${{ github.run_number }}
          RUN_ATTEMPT: ${{ github.run_attempt }}
          BRANCH: ${{ github.ref_name }}
          SHA: ${{ github.sha }}
        run: |
          TS=$(date -u +'%Y-%m-%dT%H-%M-%SZ')
          KEY="github-actions-logs/$WORKFLOW/branch=$BRANCH/run=$RUN_NUMBER-attempt=$RUN_ATTEMPT/$TS-${SHA:0:12}-runid=$RUN_ID.zip"
          echo "Uploading logs to s3://$S3_BUCKET_NAME/$KEY"
          aws s3 cp logs.zip "s3://$S3_BUCKET_NAME/$KEY" --only-show-errors
  
